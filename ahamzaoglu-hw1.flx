%{
int noOfLines = 1;
%}
tQE \"
tLBRAC \[
tRBRAC \]
tSET \"Set\"
tGET \"Get\"
tFUNCTION \"Function\"
tPRINT \"Print\"
tFOR \"For\"
tIF \"If\"
tRETURN \"Return\"
tCOMMA \,
tPLUS \+
tMUL \*
tINC \++
tGT \>
tGEQ \>=
tEQUALITY \==
tDIV \/
tMINUS \"\-\"
tDEC \"\-\-\"
tLT \<
tLEQ \<=
tNUMA [-0-9]*
tNUMB [-0-9.0-9]*
tIDENT \"[a-zA-Z_][a-zA-Z0-9_]*
tSTRING \'[a-zA-Z \!\.]+
%%
{tPLUS} printf("%d tPLUS\n", noOfLines);
{tMUL} printf("%d tMUL\n", noOfLines);
{tINC} printf("%d tINC\n", noOfLines);
{tGT} printf("%d tGT\n", noOfLines);
{tGEQ} printf("%d tGEQ\n", noOfLines);
{tEQUALITY} printf("%d tEQUALITY\n", noOfLines);
{tMINUS} printf("%d tMINUS\n", noOfLines);
{tDEC} printf("%d tDEC\n", noOfLines);
{tDIV} printf("%d tDIV\n", noOfLines);
{tLT} printf("%d tLT\n", noOfLines);
{tLEQ} printf("%d tLEQ\n", noOfLines);
{tNUMA} printf("%d tNUM (%s) (%s)\n", noOfLines, yytext, yytext); 

{tNUMB} {  	const char *ptr = strchr(yytext, '.');
		int index = (ptr - yytext);
		int i = 0;
		char first[index]; 
		while(i != index) { first[i] = yytext[i]; i++; }
		int h = strlen(yytext) - 1;
		while(h != index && yytext[h] == '0') { h--;}
		int j = 0;
		if(h == index) {char second[] = "0";
		printf("%d tNUM (%s) (%.0f.%s)\n", noOfLines, yytext, atof(first), second); }
		else {
		char second[h - index];
		int ind = index; 
		while(j != (h - ind)) { second[j] = yytext[index + 1]; j++; index++;}
		printf("%d tNUM (%s) (%.0f.%s)\n", noOfLines, yytext, atof(first), second); }
	}	

\n noOfLines++;
{tLBRAC} printf("%d tLBRAC\n", noOfLines);
{tRBRAC} printf("%d tRBRAC\n", noOfLines);
{tSET} printf("%d tSET\n", noOfLines);
{tGET} printf("%d tGET\n", noOfLines);
{tFUNCTION} printf("%d tFUNCTION\n", noOfLines);
{tPRINT} printf("%d tPRINT\n", noOfLines);
{tFOR} printf("%d tFOR\n", noOfLines);
{tIF} printf("%d tIF\n", noOfLines);
{tRETURN} printf("%d tRETURN\n", noOfLines);
{tQE} printf("");
{tCOMMA} printf("%d tCOMMA\n", noOfLines);
{tIDENT} printf("%d tIDENT (%s)\n", noOfLines, yytext+1);
{tSTRING} printf("%d tSTRING (%s)\n", noOfLines, yytext+1);
.
%%
main() {
  yylex();
}
